Aulao Romero:

Camera:
	Serao dados: V, N, C, d
	d = distancia do centro da camera ao plano de projecao
	N = vetor no eixo Z (nao muda, apenas normaliza)

	Ortogonalizar V
	V' = V - (<V, N>/<N, N>) * N

	------------------------------------

	Normalizando
	V'' = 1/||V'|| * V'

	N' = 1/||N|| * N

	U = N' X V''

	------------------------------------

	Achando matriz de mudanca de base da cena para o que a camera enxerga
	alfa = {U, V'', N'}

	[I]e,alfa = |	U   |
				|	V''	|
				|	N'	|

	------------------------------------

	Para todos os pontos(vertices do triangulo) que estao na cena
	[P]alfa = [I]e,alfa * [P-C]e

	------------------------------------

	Projetar cada ponto que a camera enxerga para as coordenadas da tela (x, y)

	Coordenadas = ( d*(Xalfa/Zalfa) , d*(Yalfa/Zalfa) )

	Normalizando para ficar entre -1 e 1
	((d/Hx)*(Xalfa/Zalfa) , (d/Hy)*(Yalfa/Zalfa))
	( 		Xd			  ,			Yd			)


	Para mapear para a tela do computador (onde o centro do plano esta no topo esquerdo da tela)
	Xs = (Xd+1)/2 * (ResX - 1)
	Ys = (1-Yd)/2 * (ResY - 1)


Z-Buffer
	Para cada triangulo
		Calcular as normais
			N = (C-A) X (B-A)

	Varrer o triangulo atraves do algoritmo Scan Line
	Para cada pixel interno do triangulo
		Converter as coordenadas de tela para as coordenadas de mundo
			P(tela) = alfa*V1 + beta*V2 + gama*V3
			P(mundo) = alfa*M1 + beta*M2 + gama*M3
				alfa + beta + gama = 1

		Verifica no Z-Buffer se P(mundo).getZ() se eh menor do que o existente na matriz do Z-Buffer naquela posicao
		Caso sim:
			Atualiza o Z-Buffer
			Pinta com a cor utilizando Phong

Phong
	(OBS: Se a camera estiver atras do objeto desconsidera-se a especular?)
	(OBS: Se existir alguma coisa entre a camera e a tela, o que faz?)

	A cor do objeto em um ponto eh dada por:
	I = Ia + Ie + Id
		Id = <L, N> * Kd * Od * Il
			Kd = coeficiente difuso
			Od = cor do objeto
			Il = cor da fonte de luz